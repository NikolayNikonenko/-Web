@page "/nedostovernost"
@using перенос_бд_на_Web.Models
@using Microsoft.EntityFrameworkCore
@using перенос_бд_на_Web.Models
@using перенос_бд_на_Web.Data
@using перенос_бд_на_Web.Services
@using Microsoft.EntityFrameworkCore
@inject SliceService sliceService
@inject ApplicationContext _context
@inject CorrData corr
@inject IJSRuntime JS

<PageTitle>Выявленные недостоверности ТМ</PageTitle>

<style>
    .status-dostovernaya {
        background-color: lightgreen;
    }

    .status-somnitelnaya {
        background-color: lightyellow;
    }

    .status-nedostovernaya {
        background-color: lightcoral;
    }
</style>

@code {
    private List<NedostovernayaTM> tm = new List<NedostovernayaTM>();
    private List<NedostovernayaTM> filteredTm = new List<NedostovernayaTM>();
    public List<TMValues> filteredTMValues = new List<TMValues>();
    private string currentSortColumn;
    private bool isAscending = true;
    private string searchTerm = string.Empty;
    private bool showSearch = false;
    private bool showChartInput = false;
    private bool showChart = false;
    private string tmIndexInput = string.Empty;
    private List<TMValues> chartData = new List<TMValues>();
    private bool chartDataAvailable = false;
    private ElementReference chartElement;
    private DateTime? startTime;
    private DateTime? endTime;
    private bool showTimeIntervalInput = false;
    private List<NedostovernayaTM> tmData = new List<NedostovernayaTM>();
    private bool showThinningInput = false; // Показывать ли поле для ввода интервала прореживания
    private int thinningInterval = 1; // Интервал прореживания по умолчанию
    private List<TMValues> chartSourceData = new List<TMValues>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        //using (var context = new ApplicationContext()) // Передайте нужные параметры
        //{
        try
        {
            // Загрузка данных о недостоверностях
            tm = await _context.tm.AsNoTracking().ToListAsync();
            filteredTm = tm;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
        //}
    }

    private void SortData(string column)
    {
        if (currentSortColumn == column)
        {
            isAscending = !isAscending;
        }
        else
        {
            currentSortColumn = column;
            isAscending = true;
        }

        filteredTm = column switch
        {
            nameof(NedostovernayaTM.ID) => isAscending ? filteredTm.OrderBy(t => t.ID).ToList() : filteredTm.OrderByDescending(t => t.ID).ToList(),
            nameof(NedostovernayaTM.IndexTm) => isAscending ? filteredTm.OrderBy(t => t.IndexTm).ToList() : filteredTm.OrderByDescending(t => t.IndexTm).ToList(),
            nameof(NedostovernayaTM.CorrTm) => isAscending ? filteredTm.OrderBy(t => t.CorrTm).ToList() : filteredTm.OrderByDescending(t => t.CorrTm).ToList(),
            nameof(NedostovernayaTM.Status) => isAscending ? filteredTm.OrderBy(t => t.Status).ToList() : filteredTm.OrderByDescending(t => t.Status).ToList(),
            nameof(NedostovernayaTM.MaxLagranj) => isAscending ? filteredTm.OrderBy(t => t.MaxLagranj).ToList() : filteredTm.OrderByDescending(t => t.MaxLagranj).ToList(),
            nameof(NedostovernayaTM.AvgLagranj) => isAscending ? filteredTm.OrderBy(t => t.AvgLagranj).ToList() : filteredTm.OrderByDescending(t => t.AvgLagranj).ToList(),
            _ => filteredTm
        };
    }

    private void SearchData()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            filteredTm = tm;
        }
        else
        {
            filteredTm = tm.Where(t => t.IndexTm.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        SortData(currentSortColumn);
    }

    private void ToggleSearch()
    {
        showSearch = !showSearch;
        if (!showSearch)
        {
            searchTerm = string.Empty;
            SearchData();
        }
    }

    private void ResetSearch()
    {
        searchTerm = string.Empty;
        filteredTm = tm;
        SortData(currentSortColumn);
    }

    private void ShowChartInput()
    {
        showChartInput = true;
        showChart = false; // Скрыть график при показе ввода для нового графика
    }

    private void HideChart()
    {
        showChart = false;
        chartDataAvailable = false;
    }

    private string GetYAxisLabel(string privyazka)
    {
        return privyazka switch
        {
            "U" => "U, кВ",
            "Pнач" or "Pкон" or "P_ген-р" or "Pген" or "Pнаг" => "P, МВт",
            "Qнач" or "Qкон" or "Q_ген-р" or "Qген" or "Qнаг" => "Q, МВар",
            _ => "Значения"
        };
    }

    private async Task GenerateChart()
    {
        if (double.TryParse(tmIndexInput, out double tmIndex))
        {
            // Получаем данные для графика
            chartData = filteredTMValues
                .Where(tv => tv.IndexTM == tmIndex)
                .OrderBy(tv => tv.NumberOfSrez)
                .ThenBy(tv => tv.OrderIndex)
                .ToList();

            if (!chartData.Any())
            {
                Console.WriteLine($"Нет данных для IndexTM: {tmIndex}");
                chartDataAvailable = false;
                return;
            }

            // Извлечение дополнительных данных
            var DataInTm = await _context.tm
                .Where(tm => tm.IndexTm == tmIndex)
                .ToListAsync();

            chartDataAvailable = true;
            showChart = true;

            string chartTitle = $"Индекс ТМ: {chartData[0].IndexTM}, Наименование: {chartData[0].NameTM}";
            string yAxisLabel = GetYAxisLabel(chartData[0].Privyazka);

            // Убедитесь, что элемент доступен перед вызовом JS
            await Task.Delay(100);
            StateHasChanged();

            // Вызов функции JavaScript
            try
            {
                await JS.InvokeVoidAsync("generateChart", chartElement, chartData, DataInTm, chartTitle, yAxisLabel);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка вызова JavaScript: {ex.Message}");
            }
        }
        else
        {
            chartDataAvailable = false;
            Console.WriteLine("Некорректный ввод номера ТМ.");
        }
    }

    private string GetRowClass(string status)
    {
        return status switch
        {
            "Достоверная" => "status-dostovernaya",
            "Сомнительная" => "status-somnitelnaya",
            "Недостоверная" => "status-nedostovernaya",
            _ => string.Empty
        };
    }
    private async Task ApplyTimeIntervalFilter(bool isThinning = false)
    {
        // Проверяем, выбраны ли временные рамки
        if (startTime.HasValue && endTime.HasValue)
        {
            // Используем SliceService для получения отфильтрованных путей файлов
            var filePaths = await sliceService.GetFilePathsInRangeAsync(startTime.Value, endTime.Value);

            // Проверяем, есть ли найденные пути
            if (!filePaths.Any())
            {
                Console.WriteLine("Нет найденных путей файлов для заданного временного интервала.");
                return;
            }

            // Получаем идентификаторы срезов, соответствующие отфильтрованным путям
            var sliceIdsInRange = await _context.slices
                .Where(s => filePaths.Contains(s.SlicePath))
                .Select(s => s.SliceID)
                .ToListAsync();

            // Проверяем, есть ли идентификаторы срезов
            if (!sliceIdsInRange.Any())
            {
                Console.WriteLine("Нет идентификаторов срезов для заданных путей файлов.");
                return;
            }

            // Фильтруем данные TMValues по идентификаторам срезов
            filteredTMValues = await _context.TMValues
                .Where(t => sliceIdsInRange.Contains(t.SliceID))
                .ToListAsync();

            // Проверяем, есть ли данные после фильтрации
            if (!filteredTMValues.Any())
            {
                Console.WriteLine("filteredTMValues пуст после фильтрации.");
                return;
            }

            // Обновляем chartSourceData
            chartSourceData = filteredTMValues.ToList();
            Console.WriteLine($"Найдено {filteredTMValues.Count} значений после фильтрации по времени.");

            // Применяем прореживание данных, если это необходимо
            if (isThinning)
            {
                filteredTMValues = filteredTMValues
                    .Where((t, index) => index % thinningInterval == 0)
                    .ToList();

                // Обновляем chartSourceData после прореживания
                chartSourceData = filteredTMValues.ToList();
                Console.WriteLine($"Прореживание данных: осталось {filteredTMValues.Count} значений.");
            }
        }
        else
        {
            // Если временной промежуток не выбран, возвращаем все данные
            filteredTMValues = await _context.TMValues.ToListAsync();
            chartSourceData = filteredTMValues.ToList(); // Обновляем chartSourceData

            // Проверяем, есть ли данные
            if (!filteredTMValues.Any())
            {
                Console.WriteLine("Нет данных в TMValues.");
                return;
            }

            // Применяем прореживание данных, если это необходимо
            if (isThinning)
            {
                filteredTMValues = filteredTMValues
                    .Where((t, index) => index % thinningInterval == 0)
                    .ToList();

                // Обновляем chartSourceData после прореживания
                chartSourceData = filteredTMValues.ToList();
                Console.WriteLine($"Прореживание данных: осталось {filteredTMValues.Count} значений.");
            }
        }
    }

}

@if (showTimeIntervalInput)
{
    <div class="mb-3">
        <label>Начало временного промежутка:</label>
        <input type="datetime-local" @bind="startTime" class="form-control" />
        <label>Конец временного промежутка:</label>
        <input type="datetime-local" @bind="endTime" class="form-control" />

        @if (showThinningInput)
        {
            <div class="mb-3">
                <label>Интервал прореживания:</label>
                <input type="number" @bind="thinningInterval" min="1" class="form-control" />
            </div>
        }

        <div class="mt-2">
            <button @onclick="() => ApplyTimeIntervalFilter(false)" class="btn btn-primary me-2">Применить фильтр</button>
            <button @onclick="() => ApplyTimeIntervalFilter(true)" class="btn btn-secondary">Прореживать данные</button>
        </div>
    </div>
}

<h2>Выявленные недостоверности ТМ</h2>

<button @onclick="() => showTimeIntervalInput = !showTimeIntervalInput" class="btn btn-primary mt-2">
    @(showTimeIntervalInput ? "Скрыть выбор времени" : "Показать выбор времени")
</button>

<button @onclick="() => showThinningInput = !showThinningInput" class="btn btn-primary mt-2">
    @(showThinningInput ? "Скрыть интервал прореживания" : "Задать интервал прореживания")
</button>


<button @onclick="() => corr.CalculationCorrelation(filteredTMValues)" class="btn btn-primary mt-2">
    Показать корреляцию
</button>



<button @onclick="ShowChartInput" class="btn btn-primary mt-2">Показать график корреляции</button>

@if (showSearch)
{
    <div class="mb-3">
        <input @bind="searchTerm" placeholder="Поиск по Index TM" class="form-control" />
        <button @onclick="SearchData" class="btn btn-primary mt-2">Искать</button>
        <button @onclick="ResetSearch" class="btn btn-secondary mt-2 ml-2">Сбросить</button>
    </div>
}

@if (showChartInput)
{
    <div class="mb-3">
        <input @bind="tmIndexInput" placeholder="Введите номер ТМ" class="form-control" />
        <button @onclick="GenerateChart" class="btn btn-primary mt-2">Построить график</button>
    </div>
}

@if (chartDataAvailable && showChart)
{
    <div class="mt-4">
        <button @onclick="HideChart" class="btn btn-secondary mb-2">Закрыть график</button>
        <canvas id="chart" width="400" height="200" @ref="chartElement"></canvas>
    </div>
}

@if (filteredTm == null || !filteredTm.Any())
{
    <p>Нет данных для отображения.</p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th @onclick="() => SortData(nameof(NedostovernayaTM.ID))">
                    Идентификатор @(currentSortColumn == nameof(NedostovernayaTM.ID) ? (isAscending ? "▲" : "▼") : "")
                </th>
                <th>
                    <span @onclick="() => SortData(nameof(NedostovernayaTM.IndexTm))" style="cursor:pointer;">
                        Индекс ТМ @(currentSortColumn == nameof(NedostovernayaTM.IndexTm) ? (isAscending ? "▲" : "▼") : "")
                    </span>
                    <button @onclick="ToggleSearch" class="btn btn-link" style="padding:0; margin-left:5px;">
                        🔍
                    </button>
                </th>
                <th @onclick="() => SortData(nameof(NedostovernayaTM.CorrTm))">
                    Коэффициент корреляции @(currentSortColumn == nameof(NedostovernayaTM.CorrTm) ? (isAscending ? "▲" : "▼") : "")
                </th>
                <th @onclick="() => SortData(nameof(NedostovernayaTM.Status))">
                    Статус @(currentSortColumn == nameof(NedostovernayaTM.Status) ? (isAscending ? "▲" : "▼") : "")
                </th>
                <th @onclick="() => SortData(nameof(NedostovernayaTM.MaxLagranj))">
                    Максимальное значение лагранжиана @(currentSortColumn == nameof(NedostovernayaTM.MaxLagranj) ? (isAscending ? "▲" : "▼") : "")
                </th>
                <th @onclick="() => SortData(nameof(NedostovernayaTM.AvgLagranj))">
                    Среднее значение лагранжиана @(currentSortColumn == nameof(NedostovernayaTM.AvgLagranj) ? (isAscending ? "▲" : "▼") : "")
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var telemetry in filteredTm)
            {
                <tr class="@GetRowClass(telemetry.Status)">
                    <td>@telemetry.ID</td>
                    <td>@telemetry.IndexTm</td>
                    <td>@telemetry.CorrTm</td>
                    <td>@telemetry.Status</td>
                    <td>@telemetry.MaxLagranj</td>
                    <td>@telemetry.AvgLagranj</td>
                </tr>
            }
        </tbody>
    </table>
}

