@page "/nedostovernost"
@using перенос_бд_на_Web.Models
@using Microsoft.EntityFrameworkCore
@using перенос_бд_на_Web.Models
@using перенос_бд_на_Web.Data
@using перенос_бд_на_Web.Services
@using Microsoft.EntityFrameworkCore
@inject SliceService sliceService
@inject ActionService ActionService
@inject TelemetryMonitoringService MonitoringService
@inject ValidationService ValidationService
@inject ApplicationContext _context
@inject CorrData corr
@inject IJSRuntime JS

<PageTitle>Выявленные недостоверности ТМ</PageTitle>

<style>
    .status-dostovernaya {
        background-color: lightgreen;
    }

    .status-somnitelnaya {
        background-color: lightyellow;
    }

    .status-nedostovernaya {
        background-color: lightcoral;
    }
</style>

@code {
    private List<NedostovernayaTM> tm = new List<NedostovernayaTM>();
    private List<NedostovernayaTM> filteredTm = new List<NedostovernayaTM>();
    public List<TMValues> filteredTMValues = new List<TMValues>();
    private string currentSortColumn;
    private bool isAscending = true;
    private string searchTerm = string.Empty;
    private bool showSearch = false;
    private bool showChartInput = false;
    private bool showChart = false;
    private string tmIndexInput = string.Empty;
    private List<TMValues> chartData = new List<TMValues>();
    private bool chartDataAvailable = false;
    private ElementReference chartElement;
    private DateTime? startDate;
    private DateTime? endDate;
    private bool showTimeIntervalInput = false;
    private List<NedostovernayaTM> tmData = new List<NedostovernayaTM>();
    private bool showThinningInput = false; // Показывать ли поле для ввода интервала прореживания
    private int pruningInterval = 1; // Интервал прореживания по умолчанию
    private List<TMValues> chartSourceData = new List<TMValues>();
    public bool IsDropdownVisible { get; set; }  // Новое свойство
    private NedostovernayaTM selectedTelemetry; // Хранит выбранный элемент для отображения действий
    private string selectedAction; // Хранит выбранное действие
    private bool showChangeList = false;
    private List<VerificationAction> selectedActions = new();
    private bool showModal = false;
    private bool isActionConfirmed = false;
    private bool isTrackingOptionsVisible = false;
    private List<TMValues> filteredTMValuesAfterValidation = new List<TMValues>();

    private bool showManualMonitorModal;
    private string manualTMInput;
    private string errorMessage;



    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }


    private async Task LoadData()
    {
        try
        {
            tm = await _context.tm.AsNoTracking().ToListAsync();
            filteredTm = tm;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private void SortData(string column)
    {
        if (currentSortColumn == column)
        {
            isAscending = !isAscending;
        }
        else
        {
            currentSortColumn = column;
            isAscending = true;
        }

        filteredTm = column switch
        {
            nameof(NedostovernayaTM.ID) => isAscending ? filteredTm.OrderBy(t => t.ID).ToList() : filteredTm.OrderByDescending(t => t.ID).ToList(),
            nameof(NedostovernayaTM.IndexTm) => isAscending ? filteredTm.OrderBy(t => t.IndexTm).ToList() : filteredTm.OrderByDescending(t => t.IndexTm).ToList(),
            nameof(NedostovernayaTM.Id1) => isAscending ? filteredTm.OrderBy(t => t.Id1).ToList() : filteredTm.OrderByDescending(t => t.Id1).ToList(),
            nameof(NedostovernayaTM.CorrTm) => isAscending ? filteredTm.OrderBy(t => t.CorrTm).ToList() : filteredTm.OrderByDescending(t => t.CorrTm).ToList(),
            nameof(NedostovernayaTM.Status) => isAscending ? filteredTm.OrderBy(t => t.Status).ToList() : filteredTm.OrderByDescending(t => t.Status).ToList(),
            nameof(NedostovernayaTM.MaxLagranj) => isAscending ? filteredTm.OrderBy(t => t.MaxLagranj).ToList() : filteredTm.OrderByDescending(t => t.MaxLagranj).ToList(),
            nameof(NedostovernayaTM.AvgLagranj) => isAscending ? filteredTm.OrderBy(t => t.AvgLagranj).ToList() : filteredTm.OrderByDescending(t => t.AvgLagranj).ToList(),
            _ => filteredTm
        };
    }

    private void SearchData()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            filteredTm = tm;
        }
        else
        {
            filteredTm = tm.Where(t => t.IndexTm.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        SortData(currentSortColumn);
    }

    private void ToggleSearch()
    {
        showSearch = !showSearch;
        if (!showSearch)
        {
            searchTerm = string.Empty;
            SearchData();
        }
    }

    private void ResetSearch()
    {
        searchTerm = string.Empty;
        filteredTm = tm;
        SortData(currentSortColumn);
    }

    private void ShowChartInput()
    {
        showChartInput = true;
        showChart = false; // Скрыть график при показе ввода для нового графика
    }

    private void HideChart()
    {
        showChart = false;
        chartDataAvailable = false;
    }

    private string GetYAxisLabel(string privyazka)
    {
        return privyazka switch
        {
            "U" => "U, кВ",
            "Pнач" or "Pкон" or "P_ген-р" or "Pген" or "Pнаг" => "P, МВт",
            "Qнач" or "Qкон" or "Q_ген-р" or "Qген" or "Qнаг" => "Q, МВар",
            _ => "Значения"
        };
    }


    private async Task GenerateChart()
    {
        if (double.TryParse(tmIndexInput, out double tmIndex))
        {
            // Шаг 1: Извлекаем данные по IndexTM
            IQueryable<TMValues> query = _context.TMValues.Where(tv => tv.IndexTM == tmIndex);

            // Извлекаем данные без фильтрации по дате
            var tmValuesList = await query.ToListAsync();

            Console.WriteLine($"Всего записей: {tmValuesList.Count}");

            // Шаг 2: Фильтрация по временному интервалу
            if (startDate.HasValue && endDate.HasValue)
            {
                chartData = tmValuesList
                    .Where(tv =>
                    {
                        // Разделяем строку по символу "_", чтобы получить часы, минуты и секунды
                        var timeParts = tv.NumberOfSrez.Split('_');
                        if (timeParts.Length == 3 &&
                            int.TryParse(timeParts[0], out int hours) &&
                            int.TryParse(timeParts[1], out int minutes) &&
                            int.TryParse(timeParts[2], out int seconds))
                        {
                            // Преобразуем в TimeSpan для сравнения
                            var parsedTime = new TimeSpan(hours, minutes, seconds);
                            var startTime = startDate.Value.TimeOfDay;
                            var endTime = endDate.Value.TimeOfDay;

                            Console.WriteLine($"Parsed TimeSpan: {parsedTime}, StartTime: {startTime}, EndTime: {endTime}");

                            // Сравнение времени без учета даты
                            return parsedTime >= startTime && parsedTime <= endTime;
                        }
                        else
                        {
                            Console.WriteLine($"Ошибка преобразования времени: {tv.NumberOfSrez}");
                            return false;
                        }
                    })
                    .ToList();
            }
            else
            {
                chartData = tmValuesList;
            }

            // Шаг 3: Применение прореживания (если задано)
            if (pruningInterval > 0)
            {
                // Сортируем данные перед прореживанием, чтобы сохранить порядок срезов
                chartData = chartData
                    .OrderBy(tv => tv.NumberOfSrez)
                    .ThenBy(tv => tv.OrderIndex)  // Убедимся, что данные сортируются по порядку
                    .Where((tv, index) => index % pruningInterval == 0)  // Применяем прореживание
                    .ToList();
            }
            else
            {
                // Просто сортируем данные, если интервал прореживания не задан
                chartData = chartData
                    .OrderBy(tv => tv.NumberOfSrez)
                    .ThenBy(tv => tv.OrderIndex)
                    .ToList();
            }

            // Проверяем наличие данных
            if (!chartData.Any())
            {
                Console.WriteLine($"Нет данных для IndexTM: {tmIndex}");
                chartDataAvailable = false;
                return;
            }

            // Шаг 4: Извлечение дополнительных данных (если необходимо)
            var DataInTm = await _context.tm
                .Where(tm => tm.IndexTm == tmIndex)
                .ToListAsync();

            // Устанавливаем флаг доступности данных для графика
            chartDataAvailable = true;
            showChart = true;

            // Формируем заголовок и метку оси Y для графика
            string chartTitle = $"Индекс ТМ: {chartData[0].IndexTM}, Наименование: {chartData[0].NameTM}";
            string yAxisLabel = GetYAxisLabel(chartData[0].Privyazka);

            // Убедитесь, что элемент доступен перед вызовом JS
            await Task.Delay(100);
            StateHasChanged();

            // Шаг 5: Вызов JavaScript для генерации графика
            try
            {
                Console.WriteLine($"Прореженные данные для графика: {chartData.Count}");
                foreach (var item in chartData)
                {
                    Console.WriteLine($"IndexTM: {item.IndexTM}, Время среза: {item.NumberOfSrez}, Id1: {item.Id1}");
                }


                await JS.InvokeVoidAsync("generateChart", chartElement, chartData, DataInTm, chartTitle, yAxisLabel);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка вызова JavaScript: {ex.Message}");
            }
        }
        else
        {
            chartDataAvailable = false;
            Console.WriteLine("Некорректный ввод номера ТМ.");
        }
    }

    private string GetRowClass(string status)
    {
        return status switch
        {
            "Достоверная" => "status-dostovernaya",
            "Сомнительная" => "status-somnitelnaya",
            "Недостоверная" => "status-nedostovernaya",
            _ => string.Empty
        };
    }
    private async Task ApplyTimeIntervalFilter(bool isThinning = false)
    {
        if (startDate.HasValue && endDate.HasValue)
        {
            await FilterByTimeInterval(isThinning);
        }
        else
        {
            await RetrieveAllData(isThinning);
        }
    }

    private async Task FilterByTimeInterval(bool isThinning)
    {
        var filePaths = await sliceService.GetFilePathsInRangeAsync(startDate.Value, endDate.Value);

        if (!filePaths.Any())
        {
            Console.WriteLine("Нет найденных путей файлов для заданного временного интервала.");
            return;
        }

        var sliceIdsInRange = await _context.slices
            .Where(s => filePaths.Contains(s.SlicePath))
            .Select(s => s.SliceID)
            .ToListAsync();

        if (!sliceIdsInRange.Any())
        {
            Console.WriteLine("Нет идентификаторов срезов для заданных путей файлов.");
            return;
        }

        filteredTMValues = await _context.TMValues
            .Where(t => sliceIdsInRange.Contains(t.SliceID))
            .ToListAsync();

        if (!filteredTMValues.Any())
        {
            Console.WriteLine("filteredTMValues пуст после фильтрации.");
            return;
        }

        UpdateChartSourceData(filteredTMValues);

        if (isThinning)
        {
            ApplyThinning();
        }
    }

    private async Task RetrieveAllData(bool isThinning)
    {
        filteredTMValues = await _context.TMValues.ToListAsync();
        UpdateChartSourceData(filteredTMValues);

        if (!filteredTMValues.Any())
        {
            Console.WriteLine("Нет данных в TMValues.");
            return;
        }

        if (isThinning)
        {
            ApplyThinning();
        }
    }

    private void UpdateChartSourceData(List<TMValues> data)
    {
        chartSourceData = data.ToList();
        Console.WriteLine($"Найдено {data.Count} значений после фильтрации по времени.");
    }

    private void ApplyThinning()
    {
        if (pruningInterval <= 0)
        {
            Console.WriteLine("thinningInterval должен быть больше 0.");
            return;
        }

        filteredTMValues = filteredTMValues
            .Where((t, index) => index % pruningInterval == 0)
            .ToList();

        UpdateChartSourceData(filteredTMValues);
        Console.WriteLine($"Прореживание данных: осталось {filteredTMValues.Count} значений.");
    }


    private async Task ApplyChangesAndCalculateCorrelation()
    {
        ConfirmActions();  // Выполнить логику для подтверждения изменений
        await OnCalculateCorrelation();  // Выполнить расчет корреляции
    }

    private void ToggleSelectedActions()
    {
        showModal = !showModal;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    void AddToSelectedActions(VerificationAction action)
    {
        // Проверяем, что комбинация TelemetryId и Id1 уникальна
        if (!selectedActions.Any(a => a.TelemetryId == action.TelemetryId && a.Id1 == action.Id1))
        {
            selectedActions.Add(action);
        }
    }

    private async Task ConfirmActions()
    {
        // Создаем новый список для действий, включая каждую запись из selectedActions
        List<VerificationAction> actionsToExecute = selectedActions
            .Select(action => new VerificationAction
                {
                    ActionName = action.ActionName,
                    TelemetryId = action.TelemetryId,
                    Id1 = action.Id1,
                    StartDate = action.StartDate,
                    EndDate = action.EndDate
                })
            .ToList();

        // Выполнение действий через ActionService
        await ActionService.ExecuteAction(actionsToExecute);

        // Очищаем выбранные действия и закрываем модальное окно
        selectedActions.Clear();
        showModal = false;
        Console.WriteLine("Выбранные действия успешно выполнены.");
        isActionConfirmed = true;
        ToggleMonitoringOptions();
    }


    private async Task SetFilteredTMValues(List<TMValues> values)
    {
        filteredTMValues = values;
        await InvokeAsync(StateHasChanged); // Обновление интерфейса
    }



    private void SelectAction(NedostovernayaTM telemetry, string action)
    {
        if (!string.IsNullOrEmpty(action) && startDate.HasValue && endDate.HasValue)
        {
            // Проверяем, существует ли уже действие с таким же TelemetryId и Id1
            var existingAction = selectedActions.FirstOrDefault(a => a.TelemetryId == (int)telemetry.IndexTm && a.Id1 == (int)telemetry.Id1);

            if (existingAction != default)
            {
                // Удаляем существующую запись, если она совпадает по TelemetryId и Id1
                selectedActions.Remove(existingAction);
            }

            // Добавляем новое действие для текущего TelemetryId и Id1
            selectedActions.Add(new VerificationAction
                {
                    TelemetryId = (int)telemetry.IndexTm,
                    Id1 = (int)telemetry.Id1,
                    ActionName = action,
                    StartDate = startDate.Value,
                    EndDate = endDate.Value
                });
        }
        else if (string.IsNullOrEmpty(action))
        {
            // Удаляем все действия, если пользователь выбрал пустое значение, по сочетанию TelemetryId и Id1
            selectedActions.RemoveAll(a => a.TelemetryId == (int)telemetry.IndexTm && a.Id1 == (int)telemetry.Id1);
        }
    }

    private void ShowTrackingOptions()
    {
        // Здесь можно открыть выпадающий список с вариантами отслеживания
        // Например, можно использовать булеву переменную для контроля видимости списка
        isTrackingOptionsVisible = true;
    }

}

@if (showTimeIntervalInput)
{
    <div class="mb-3">
        <label>Начало временного промежутка:</label>
        <input type="datetime-local" @bind="startDate" class="form-control" />
        <label>Конец временного промежутка:</label>
        <input type="datetime-local" @bind="endDate" class="form-control" />

        @if (showThinningInput)
        {
            <div class="mb-3">
                <label>Интервал прореживания:</label>
                <input type="number" @bind="pruningInterval" min="1" class="form-control" />
            </div>
        }

        <div class="mt-2">
            <button @onclick="() => ApplyTimeIntervalFilter(false)" class="btn btn-primary me-2">Применить фильтр</button>
            <button @onclick="() => ApplyTimeIntervalFilter(true)" class="btn btn-secondary">Прореживать данные</button>
        </div>
    </div>
}

<h2>Выявленные недостоверности ТМ</h2>

<button @onclick="() => showTimeIntervalInput = !showTimeIntervalInput" class="btn btn-primary mt-2">
    @(showTimeIntervalInput ? "Скрыть выбор времени" : "Показать выбор времени")
</button>

<button @onclick="() => showThinningInput = !showThinningInput" class="btn btn-primary mt-2">
    @(showThinningInput ? "Скрыть интервал прореживания" : "Задать интервал прореживания")
</button>


<!-- Кнопка для запуска расчёта -->
<button @onclick="OnCalculateCorrelation" class="btn btn-primary mt-2" disabled="@isCalculating">
    Рассчитать корреляцию
</button>

<!-- Кнопка для остановки расчёта -->
<button @onclick="OnStopCalculation" class="btn btn-danger mt-2" disabled="@(isCalculating == false)">
    Остановить расчет
</button>

@if (isStatusBarVisible)
{
    <!-- Прогресс-бар -->
    <div class="progress mt-4">
        <div class="progress-bar" role="progressbar" style="width: @currentProgress%" aria-valuenow="@currentProgress" aria-valuemin="0" aria-valuemax="100">
            @currentProgress%
        </div>
    </div>
}

@code {
    private bool isCalculating = false;
    private bool isStatusBarVisible = false;
    private int currentProgress = 0;
    private CancellationTokenSource cancellationTokenSource;

    private async Task OnCalculateCorrelation()
    {
        if (isCalculating) return; // Если расчёт уже запущен, новый не начнем

        // Инициализация состояния
        isCalculating = true;
        isStatusBarVisible = true; // Показываем статусбар
        cancellationTokenSource = new CancellationTokenSource(); // Инициализация токена отмены

        await InvokeAsync(StateHasChanged); // Обновляем UI в начале

        try
        {
            await corr.CalculationCorrelation(
                filteredTMValues,       // передаем отфильтрованные значения
                UpdateProgress,         // метод для обновления прогресса
                SetStatusBarVisible,     // метод для управления видимостью статусбара
                startDate,              // начальная дата
                endDate,                // конечная дата
                false,
                1,
                cancellationTokenSource.Token // передаем токен отмены
            );
        }
        catch (OperationCanceledException)
        {
            Console.WriteLine("Расчет был остановлен.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при расчете корреляции: {ex.Message}");
        }
        finally
        {
            isCalculating = false;
            isStatusBarVisible = false;
            cancellationTokenSource.Dispose();
            await InvokeAsync(StateHasChanged);
        }
    }

    private void OnStopCalculation()
    {
        if (isCalculating && cancellationTokenSource != null)
        {
            cancellationTokenSource.Cancel(); // Отменяем текущую задачу
            isCalculating = false;
        }
    }

    private void SetStatusBarVisible(bool isVisible)
    {
        isStatusBarVisible = isVisible;
        InvokeAsync(StateHasChanged);
    }

    private void UpdateProgress(int progress)
    {
        currentProgress = progress; // Обновляем прогресс
        InvokeAsync(StateHasChanged); // Обновляем UI через диспетчер потока
    }


}

<button @onclick="ShowChartInput" class="btn btn-primary mt-2">Показать график корреляции</button>

@if (showSearch)
{
    <div class="mb-3">
        <input @bind="searchTerm" placeholder="Поиск по Index TM" class="form-control" />
        <button @onclick="SearchData" class="btn btn-primary mt-2">Искать</button>
        <button @onclick="ResetSearch" class="btn btn-secondary mt-2 ml-2">Сбросить</button>
    </div>
}

@if (showChartInput)
{
    <div class="mb-3">
        <input @bind="tmIndexInput" placeholder="Введите номер ТМ" class="form-control" />
        <button @onclick="GenerateChart" class="btn btn-primary mt-2">Построить график</button>
    </div>
}

@if (chartDataAvailable && showChart)
{
    <div class="mt-4">
        <button @onclick="HideChart" class="btn btn-secondary mb-2">Закрыть график</button>
        <canvas id="chart" width="400" height="200" @ref="chartElement"></canvas>
    </div>
}

<!-- Кнопка для показа выбранных действий -->
@if (selectedActions.Any())
{
    <button class="btn btn-primary" @onclick="ToggleSelectedActions">Показать выбранные действия</button>
}

@if (showModal)
{
    <div class="alert alert-info mt-3">
        <h5>Выбранные действия</h5>
        <h6>Выбранный интервал: от @startDate.Value.ToString("g") до @endDate.Value.ToString("g")</h6>

        <!-- Таблица с выбранными действиями -->
        <table class="table table-bordered mt-3">
            <thead>
                <tr>
                    <th>Индекс ТМ</th>
                    <th>Узел</th>
                    <th>Действие</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var action in selectedActions)
                {
                    <tr>
                        <td>@action.TelemetryId</td>
                        <td>@action.Id1</td>
                        <td>@action.ActionName</td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- Кнопка для выбора отслеживаемых телеизмерений и расчета корреляции -->
        <div class="mt-3">
            <!-- Кнопка для выбора отслеживаемых телеизмерений -->
            <button class="btn btn-primary dropdown-toggle" type="button" @onclick="ToggleMonitoringOptions" aria-expanded="false">
                Выбрать отслеживаемые телеизмерения
            </button>
            @if (showOptions)
            {
                <ul class="dropdown-menu show">
                    <li><a class="dropdown-item" @onclick="async () => await SetFilteredTMValues(await MonitoringService.MonitorAllTMAsync())">Отслеживать изменения для всех ТМ</a></li>
                    <li><a class="dropdown-item" @onclick="async () => await SetFilteredTMValues(await MonitoringService.MonitorUnreliableAndQuestionableTMAsync())">Отслеживать изменения для недостоверных и сомнительных ТМ</a></li>
                    <li><a class="dropdown-item" @onclick="async () => await SetFilteredTMValues(await MonitoringService.MonitorUnreliableTMAsync())">Отслеживать изменения для недостоверных ТМ</a></li>
                    <li>
                        <a class="dropdown-item"
                           @onclick="async () => await SetFilteredTMValues(await MonitoringService.MonitorVerifiedTMAsync(selectedActions.Select(a => a.TelemetryId).ToList()))">
                            Отслеживать изменения для ТМ, которые были достоверизованы
                        </a>
                    </li>
                </ul>
            }
            <!-- Отдельная кнопка для ручного ввода списка отслеживаемых ТМ -->
            <button class="btn btn-secondary mt-2" @onclick="OpenManualMonitorModal">Задать список отслеживаемых ТМ вручную</button>
        </div>
        @if (showManualMonitorModal)
        {
            <div class="modal d-block" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Введите номера ТМ для отслеживания</h5>
                            <button type="button" class="btn-close" @onclick="CloseManualMonitorModal"></button>
                        </div>
                        <div class="modal-body">
                            <input type="text" class="form-control" @bind="manualTMInput" placeholder="Введите номера ТМ через запятую">
                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="text-danger mt-2">@errorMessage</div>
                            }
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseManualMonitorModal">Отмена</button>
                            <button type="button" class="btn btn-primary" @onclick="ValidateAndSubmitManualTMInput">Подтвердить</button>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Объединенная кнопка для применения изменений и расчета корреляции -->
        <div class="mt-3">
            <button class="btn btn-success" @onclick="ApplyChangesAndCalculateCorrelation">
                Применить изменения и рассчитать корреляцию для отслеживаемых ТМ
            </button>
            <button class="btn btn-secondary" @onclick="CloseModal">Закрыть</button>
        </div>
    </div>
}

@code {
    private bool showOptions = false;

    private void ToggleMonitoringOptions()
    {
        showOptions = !showOptions;
    }

    private void OpenManualMonitorModal()
    {
        showManualMonitorModal = true;
        errorMessage = string.Empty;
    }

    private void CloseManualMonitorModal()
    {
        showManualMonitorModal = false;
        manualTMInput = string.Empty;
        errorMessage = string.Empty;
    }

    private async Task ValidateAndSubmitManualTMInput()
    {
        // Вызываем валидацию через ValidationService
        var validationResult = await ValidationService.ValidateTMInputAsync(manualTMInput);

        if (!validationResult.IsValid)
        {
            errorMessage = string.Join("; ", validationResult.Errors);
            return;
        }

        // Преобразуем список строк в список целых чисел
        var tmNumbers = validationResult.TMNumbers.Select(int.Parse).ToList();

        // Если валидация прошла успешно, выполняем логику для отслеживания
        filteredTMValuesAfterValidation = await MonitoringService.ManualMonitorSetupAsync(tmNumbers);
        CloseManualMonitorModal();
    }

    private string GetSelectedAction(int telemetryId, int id1)
    {
        var action = selectedActions.FirstOrDefault(a => a.TelemetryId == telemetryId && a.Id1 == id1);
        return action?.ActionName ?? string.Empty;
    }

}


@if (filteredTm == null || !filteredTm.Any())
{
    <p>Нет данных для отображения.</p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th @onclick="() => SortData(nameof(NedostovernayaTM.ID))">
                    Идентификатор @(currentSortColumn == nameof(NedostovernayaTM.ID) ? (isAscending ? "▲" : "▼") : "")
                </th>
                <th>
                    <span @onclick="() => SortData(nameof(NedostovernayaTM.IndexTm))" style="cursor:pointer;">
                        Индекс ТМ @(currentSortColumn == nameof(NedostovernayaTM.IndexTm) ? (isAscending ? "▲" : "▼") : "")
                    </span>
                    <button @onclick="ToggleSearch" class="btn btn-link" style="padding:0; margin-left:5px;">
                        🔍
                    </button>
                </th>
                <th @onclick="() => SortData(nameof(NedostovernayaTM.CorrTm))">
                    Узел @(currentSortColumn == nameof(NedostovernayaTM.Id1) ? (isAscending ? "▲" : "▼") : "")
                </th>
                <th @onclick="() => SortData(nameof(NedostovernayaTM.CorrTm))">
                    Коэффициент корреляции @(currentSortColumn == nameof(NedostovernayaTM.CorrTm) ? (isAscending ? "▲" : "▼") : "")
                </th>
                <th @onclick="() => SortData(nameof(NedostovernayaTM.Status))">
                    Статус @(currentSortColumn == nameof(NedostovernayaTM.Status) ? (isAscending ? "▲" : "▼") : "")
                </th>
                <th @onclick="() => SortData(nameof(NedostovernayaTM.MaxLagranj))">
                    Максимальное значение лагранжиана @(currentSortColumn == nameof(NedostovernayaTM.MaxLagranj) ? (isAscending ? "▲" : "▼") : "")
                </th>
                <th @onclick="() => SortData(nameof(NedostovernayaTM.AvgLagranj))">
                    Среднее значение лагранжиана @(currentSortColumn == nameof(NedostovernayaTM.AvgLagranj) ? (isAscending ? "▲" : "▼") : "")
                </th>
                <th @onclick="() => SortData(nameof(NedostovernayaTM.recomendedActions))">
                    Действия по достоверизации @(currentSortColumn == nameof(NedostovernayaTM.recomendedActions) ? (isAscending ? "▲" : "▼") : "")
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var telemetry in filteredTm)
            {
                <tr class="@GetRowClass(telemetry.Status)">
                    <td>@telemetry.ID</td>
                    <td>@telemetry.IndexTm</td>
                    <td>@telemetry.Id1</td>
                    <td>@telemetry.CorrTm</td>
                    <td>@telemetry.Status</td>
                    <td>@telemetry.MaxLagranj</td>
                    <td>@telemetry.AvgLagranj</td>
                    <td>
                        <select class="form-select"
                                value="@GetSelectedAction((int)telemetry.IndexTm, telemetry.Id1)"
                                @onchange="(e) => SelectAction(telemetry, e.Value.ToString())">
                            <option value="">Выберите действие</option>
                            <option value="Изменить знак ТМ">Изменить знак ТМ</option>
                            <option value="Создать дорасчет">Создать дорасчет</option>
                            <option value="Исключить из ОС">Исключить из ОС</option>
                        </select>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}






