@page "/"
@using перенос_бд_на_Web.Models
@using Microsoft.EntityFrameworkCore
@using System.Text.RegularExpressions;
@inject ApplicationContext _context

<PageTitle>Конфигурация</PageTitle>

<h3>Конфигурационные настройки</h3>

@code {
    private string InputDataPath { get; set; }
    private string PreparedDataPath { get; set; }
    private string ExperimentalDataPath { get; set; }
    private decimal IncorrectTMCorrelation { get; set; }
    private decimal QuestionableTMCorrelation { get; set; }
    private decimal ReliableTMCorrelation { get; set; }

    private List<string> validationErrors = new List<string>(); // Список для хранения ошибок

    protected override async Task OnInitializedAsync()
    {
        // Загрузка параметров из БД
        var parameters = await _context.configuration_parameters.ToListAsync();

        InputDataPath = parameters.FirstOrDefault(p => p.parameter_name == "InputDataPath")?.parameter_value;
        PreparedDataPath = parameters.FirstOrDefault(p => p.parameter_name == "PreparedDataPath")?.parameter_value;
        ExperimentalDataPath = parameters.FirstOrDefault(p => p.parameter_name == "ExperimentalDataPath")?.parameter_value;
        IncorrectTMCorrelation = decimal.Parse(parameters.FirstOrDefault(p => p.parameter_name == "IncorrectTMCorrelation")?.parameter_value ?? "0");
        QuestionableTMCorrelation = decimal.Parse(parameters.FirstOrDefault(p => p.parameter_name == "QuestionableTMCorrelation")?.parameter_value ?? "0");
        ReliableTMCorrelation = decimal.Parse(parameters.FirstOrDefault(p => p.parameter_name == "ReliableTMCorrelation")?.parameter_value ?? "0");
    }

    private async Task SaveConfiguration()
    {
        validationErrors.Clear(); // Очищаем ошибки перед проверкой

        // Проверка параметров перед сохранением
        ValidateParameter("InputDataPath", InputDataPath);
        ValidateParameter("PreparedDataPath", PreparedDataPath);
        ValidateParameter("ExperimentalDataPath", ExperimentalDataPath);
        ValidateParameter("IncorrectTMCorrelation", IncorrectTMCorrelation.ToString());
        ValidateParameter("QuestionableTMCorrelation", QuestionableTMCorrelation.ToString());
        ValidateParameter("ReliableTMCorrelation", ReliableTMCorrelation.ToString());

        // Если есть ошибки, не сохраняем данные
        if (validationErrors.Any())
        {
            return;
        }

        // Обновление параметров в БД
        await UpdateOrCreateParameter("InputDataPath", InputDataPath);
        await UpdateOrCreateParameter("PreparedDataPath", PreparedDataPath);
        await UpdateOrCreateParameter("ExperimentalDataPath", ExperimentalDataPath);
        await UpdateOrCreateParameter("IncorrectTMCorrelation", IncorrectTMCorrelation.ToString());
        await UpdateOrCreateParameter("QuestionableTMCorrelation", QuestionableTMCorrelation.ToString());
        await UpdateOrCreateParameter("ReliableTMCorrelation", ReliableTMCorrelation.ToString());

        await _context.SaveChangesAsync();
    }

    private async Task UpdateOrCreateParameter(string parameterName, string parameterValue)
    {
        var parameter = await _context.configuration_parameters.FirstOrDefaultAsync(p => p.parameter_name == parameterName);
        if (parameter == null)
        {
            _context.configuration_parameters.Add(new ConfigurationParameter
                {
                    parameter_name = parameterName,
                    parameter_value = parameterValue
                });
        }
        else
        {
            parameter.parameter_value = parameterValue;
        }
    }

    private void ValidateParameter(string parameterName, string parameterValue)
    {
        // Проверки путей
        if (parameterName == "InputDataPath" || parameterName == "PreparedDataPath" || parameterName == "ExperimentalDataPath")
        {
            // Проверка на null
            if (string.IsNullOrEmpty(parameterValue))
            {
                validationErrors.Add($"Параметр {parameterName} не может быть пустым.");
                return;
            }

            if (!Regex.IsMatch(parameterValue, @"^[a-zA-Z]:\\.*$"))
            {
                validationErrors.Add($"Значение для пути {parameterName} должно быть в формате пути на диске.");
            }

            if (!Directory.Exists(parameterValue))
            {
                validationErrors.Add($"Путь {parameterValue} для параметра {parameterName} не существует.");
            }
        }

        // Проверки числовых значений
        if (parameterName == "IncorrectTMCorrelation" || parameterName == "QuestionableTMCorrelation" || parameterName == "ReliableTMCorrelation")
        {
            if (!decimal.TryParse(parameterValue, out var value) || value < -1 || value > 1)
            {
                validationErrors.Add($"Значение для {parameterName} должно быть числом в диапазоне от -1 до 1.");
            }
        }
    }


}

<!-- Отображение ошибок -->
@if (validationErrors.Any())
{
    <div class="alert alert-danger">
        <ul>
            @foreach (var error in validationErrors)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

<div>
    <label>Путь для "Входные данные":</label>
    <input @bind="InputDataPath" class="form-control" />
</div>
<div>
    <label>Путь для "Подготовленные данные":</label>
    <input @bind="PreparedDataPath" class="form-control" />
</div>
<div>
    <label>Путь для "Экспериментальные данные":</label>
    <input @bind="ExperimentalDataPath" class="form-control" />
</div>
<div>
    <label>Коэффициент корреляции некорректных ТМ:</label>
    <input type="number" step="0.01" @bind="IncorrectTMCorrelation" class="form-control" />
</div>
<div>
    <label>Коэффициент корреляции сомнительных ТМ:</label>
    <input type="number" step="0.01" @bind="QuestionableTMCorrelation" class="form-control" />
</div>
<div>
    <label>Коэффициент корреляции достоверных ТМ:</label>
    <input type="number" step="0.01" @bind="ReliableTMCorrelation" class="form-control" />
</div>

<button class="btn btn-primary" @onclick="SaveConfiguration">Сохранить</button>


