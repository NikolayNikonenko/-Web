@page "/"
@using перенос_бд_на_Web.Models
@using Microsoft.EntityFrameworkCore
@using System.Text.RegularExpressions;
@inject ApplicationContext _context

<PageTitle>Конфигурация</PageTitle>

<h3>Конфигурационные настройки</h3>

@code {
    private string InputDataPath { get; set; }
    private string PreparedDataPath { get; set; }
    private string ExperimentalDataPath { get; set; }
    private string ReportDataPath { get; set; }
    private string IncorrectTMCorrelationRange { get; set; }
    private string QuestionableTMCorrelationRange { get; set; }
    private string ReliableTMCorrelationRange { get; set; }

    private List<string> validationErrors = new List<string>(); // Список для хранения ошибок

    private bool saveSuccess = false; // Флаг успешного сохранения

    private Dictionary<string, string> parameterLabels = new Dictionary<string, string>
{
    { "InputDataPath", "параметра: расположение для набора \"Входные данные\"" },
    { "PreparedDataPath", "параметра: расположение для набора \"Подготовленные данные\"" },
    { "ExperimentalDataPath", "параметра: расположение для набора \"Экспериментальные данные\"" },
    { "ReportDataPath", "параметра: расположение для отчетов" },
    { "IncorrectTMCorrelation", "параметра: Коэффициент корреляции некорректных ТМ" },
    { "QuestionableTMCorrelation", "параметра: Коэффициент корреляции сомнительных ТМ" },
    { "ReliableTMCorrelation", "параметра: Коэффициент корреляции достоверных ТМ" },
};

    protected override async Task OnInitializedAsync()
    {
        // Загрузка параметров из БД
        var parameters = await _context.configuration_parameters.ToListAsync();

        InputDataPath = parameters.FirstOrDefault(p => p.parameter_name == "InputDataPath")?.parameter_value;
        PreparedDataPath = parameters.FirstOrDefault(p => p.parameter_name == "PreparedDataPath")?.parameter_value;
        ExperimentalDataPath = parameters.FirstOrDefault(p => p.parameter_name == "ExperimentalDataPath")?.parameter_value;
        ReportDataPath = parameters.FirstOrDefault(p => p.parameter_name == "ReportDataPath")?.parameter_value;

        // Загрузка коэффициентов корреляции с диапазонами
        var incorrectTMCorrelation = parameters.FirstOrDefault(p => p.parameter_name == "IncorrectTMCorrelation")?.parameter_value;
        var questionableTMCorrelation = parameters.FirstOrDefault(p => p.parameter_name == "QuestionableTMCorrelation")?.parameter_value;
        var reliableTMCorrelation = parameters.FirstOrDefault(p => p.parameter_name == "ReliableTMCorrelation")?.parameter_value;

        // Преобразование строк с диапазонами в значения
        IncorrectTMCorrelationRange = ParseCorrelationRange(incorrectTMCorrelation);
        QuestionableTMCorrelationRange = ParseCorrelationRange(questionableTMCorrelation);
        ReliableTMCorrelationRange = ParseCorrelationRange(reliableTMCorrelation);
    }

    // Метод для парсинга диапазона
    private string ParseCorrelationRange(string correlationValue)
    {
        if (string.IsNullOrEmpty(correlationValue))
        {
            return ""; // Дефолтный диапазон, если значение пустое
        }

        // Проверяем, есть ли символ разделения
        var parts = correlationValue.Split(';');
        if (parts.Length == 2 && decimal.TryParse(parts[0], out _) && decimal.TryParse(parts[1], out _))
        {
            return correlationValue; // Если значение корректно, возвращаем как есть
        }

        return "-1;1"; // Возвращаем дефолтный диапазон, если формат некорректен
    }

    private async Task SaveConfiguration()
    {
        validationErrors.Clear(); // Очищаем ошибки перед проверкой

        // Проверка параметров перед сохранением
        ValidateParameter("InputDataPath", InputDataPath);
        ValidateParameter("PreparedDataPath", PreparedDataPath);
        ValidateParameter("ExperimentalDataPath", ExperimentalDataPath);
        ValidateParameter("ReportDataPath", ReportDataPath);
        ValidateParameter("IncorrectTMCorrelation", IncorrectTMCorrelationRange);
        ValidateParameter("QuestionableTMCorrelation", QuestionableTMCorrelationRange);
        ValidateParameter("ReliableTMCorrelation", ReliableTMCorrelationRange);

        // Если есть ошибки, не сохраняем данные
        if (validationErrors.Any())
        {
            return;
        }

        // Обновление параметров в БД
        await UpdateOrCreateParameter("InputDataPath", InputDataPath);
        await UpdateOrCreateParameter("PreparedDataPath", PreparedDataPath);
        await UpdateOrCreateParameter("ExperimentalDataPath", ExperimentalDataPath);
        await UpdateOrCreateParameter("ReportDataPath", ReportDataPath);
        await UpdateOrCreateParameter("IncorrectTMCorrelation", IncorrectTMCorrelationRange);
        await UpdateOrCreateParameter("QuestionableTMCorrelation", QuestionableTMCorrelationRange);
        await UpdateOrCreateParameter("ReliableTMCorrelation", ReliableTMCorrelationRange);

        await _context.SaveChangesAsync();

        saveSuccess = true; // Устанавливаем флаг успешного сохранения
    }

    private async Task UpdateOrCreateParameter(string parameterName, string parameterValue)
    {
        var parameter = await _context.configuration_parameters.FirstOrDefaultAsync(p => p.parameter_name == parameterName);
        if (parameter == null)
        {
            _context.configuration_parameters.Add(new ConfigurationParameter
                {
                    parameter_name = parameterName,
                    parameter_value = parameterValue
                });
        }
        else
        {
            parameter.parameter_value = parameterValue;
        }
    }

    private void ValidateParameter(string parameterName, string parameterValue)
    {
        // Проверки путей
        if (parameterName == "InputDataPath" || parameterName == "PreparedDataPath" || parameterName == "ExperimentalDataPath" || parameterName == "ReportDataPath")
        {
            // Проверка на null
            if (string.IsNullOrEmpty(parameterValue))
            {
                validationErrors.Add($"{parameterLabels[parameterName]} не может быть пустым.");
                return;
            }

            if (!Regex.IsMatch(parameterValue, @"^[a-zA-Z]:\\.*$"))
            {
                validationErrors.Add($"Значение для {parameterLabels[parameterName]} должно быть в формате пути на диске.");
            }

            if (!Directory.Exists(parameterValue))
            {
                validationErrors.Add($"Путь: {parameterValue} для {parameterLabels[parameterName]} не существует.");
            }
        }

        // Проверки диапазонов для коэффициентов корреляции
        if (parameterName == "IncorrectTMCorrelation" || parameterName == "QuestionableTMCorrelation" || parameterName == "ReliableTMCorrelation")
        {
            // Проверка, что значение является диапазоном
            var rangeValues = parameterValue.Split(';');
            if (rangeValues.Length != 2)
            {
                validationErrors.Add($"Значение для {parameterLabels[parameterName]} должно быть в формате диапазона (например, -1;-0.5).");
                return;
            }

            // Проверка числовых значений в диапазоне
            if (!decimal.TryParse(rangeValues[0], out var minValue) || !decimal.TryParse(rangeValues[1], out var maxValue))
            {
                validationErrors.Add($"Значение для {parameterLabels[parameterName]} должно содержать два числа, разделённых точкой с запятой.");
                return;
            }

            // Проверка на диапазон от -1 до 1
            if (minValue < -1 || maxValue > 1)
            {
                validationErrors.Add($"Значение для {parameterLabels[parameterName]} должно быть в пределах от -1 до 1.");
                return;
            }

            // Проверка, что минимальное значение меньше максимального
            if (minValue > maxValue)
            {
                validationErrors.Add($"Минимальное значение для {parameterLabels[parameterName]} не может быть больше максимального.");
                return;
            }
        }
    }
}

<!-- Отображение ошибок -->
@if (validationErrors.Any())
{
    <div class="alert alert-danger">
        <ul>
            @foreach (var error in validationErrors)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

<div class="mb-3">
    <label>Расположение для набора "Входные данные":</label>
    <input @bind="InputDataPath" class="form-control" placeholder="C:\path\to\input\data" />
</div>
<div class="mb-3">
    <label>Расположение для набора "Подготовленные данные":</label>
    <input @bind="PreparedDataPath" class="form-control" placeholder="C:\path\to\prepared\data" />
</div>
<div class="mb-3">
    <label>Расположение для набора "Экспериментальные данные":</label>
    <input @bind="ExperimentalDataPath" class="form-control" placeholder="C:\path\to\experimental\data" />
</div>
<div class="mb-3">
    <label>Расположение для набора папки для сохранения отчетов:</label>
    <input @bind="ReportDataPath" class="form-control" placeholder="C:\path\to\report\data" />
</div>
<div class="mb-3">
    <label>Коэффициент корреляции некорректных ТМ (диапазон, например -1;-0.5):</label>
    <input @bind="IncorrectTMCorrelationRange" class="form-control" placeholder="-1;-0.5" />
</div>
<div class="mb-3">
    <label>Коэффициент корреляции сомнительных ТМ (диапазон, например -0,5;0.5):</label>
    <input @bind="QuestionableTMCorrelationRange" class="form-control" placeholder="-0.5;0.5" />
</div>
<div class="mb-3">
    <label>Коэффициент корреляции достоверных ТМ (диапазон, например 0,5;1):</label>
    <input @bind="ReliableTMCorrelationRange" class="form-control" placeholder="0.5;1" />
</div>

<button class="btn btn-primary" @onclick="SaveConfiguration">Сохранить</button>

@if (saveSuccess)
{
    <div class="alert alert-success">
        Конфигурация успешно сохранена.
    </div>
}



