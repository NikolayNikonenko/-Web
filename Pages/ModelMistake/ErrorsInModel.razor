@page "/modelError"
@using перенос_бд_на_Web.Models
@using перенос_бд_на_Web.Services
@using перенос_бд_на_Web.Pages.ModelMistake
@using Microsoft.EntityFrameworkCore
@inject ApplicationContext _modelContext
@* @inject DataFilterService _dataFilterService *@
<PageTitle>Ошибки в модели</PageTitle>

@code {
    private List<ModelErrors> modelErrors = new List<ModelErrors>();
    private List<ModelErrors> filtredModelErrors = new List<ModelErrors>();
    private FindErrors findErrors; // Объявляем экземпляр класса FindErrors
    private string currentSortColumn;
    private bool isAscending = true;
    private string searchTerm = string.Empty;
    private bool showSearch = false;

    private IBrowserFile uploadedFile;
    private string selectedFilePath;

    private string lastFilePath;


    private bool isProcessing = false; // Указывает, идет ли операция
    private int progress = 0; // Прогресс выполнения (в процентах)
    private string statusMessage = "Ожидание начала операции..."; // Сообщение о текущем статусе
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Загрузка пути файла
            lastFilePath = await _modelContext.file_paths
                .OrderByDescending(fp => fp.updatedAt)
                .Select(fp => fp.path)
                .FirstOrDefaultAsync();

            // Загрузка данных из базы данных
            modelErrors = await _modelContext.modelErrors.AsNoTracking().ToListAsync();
            filtredModelErrors = modelErrors.ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка при загрузке данных: {ex.Message}";
            Console.WriteLine(errorMessage);
            StateHasChanged();
        }
    }

    private async Task IdentifyErrors()
    {
        if (!string.IsNullOrWhiteSpace(selectedFilePath))
        {
            isProcessing = true;
            progress = 0;
            statusMessage = "Идет поиск ошибок модели в выбранном файле...";
            int totalSteps = 100; // Укажите общее количество шагов для расчета

            try
            {
                findErrors = new FindErrors(_modelContext);
                // Делегат для обновления прогресса
                Action<int> reportProgress = step =>
                {
                    progress = (step * 100) / totalSteps; // Рассчитываем процент выполнения
                    UpdateProgress(progress); // Обновляем прогресс на UI
                };
                await findErrors.CalculateModelErrorsAsync(selectedFilePath, totalSteps, reportProgress); // Передаем путь к файлу
                modelErrors = await _modelContext.modelErrors.AsNoTracking().ToListAsync(); // Обновляем данные ошибок
                filtredModelErrors = modelErrors;
                statusMessage = "Расчет завершен!";
            }
            catch (Exception ex)
            {
                errorMessage = $"Ошибка при расчете: {ex.Message}";
                Console.WriteLine(errorMessage);
                StateHasChanged();
            }
            finally
            {
                isProcessing = false;
            }
        }
        else
        {
            errorMessage = "Файл не был выбран или сохранен.";
            Console.WriteLine(errorMessage);
            StateHasChanged();
        }
    }

    private void UpdateProgress(int value)
    {
        progress = value;
        InvokeAsync(StateHasChanged); // Обновляем интерфейс
    }

    public async Task UpdateFilePathAsync(string filePath)
    {
        try
        {
            await _modelContext.Database.ExecuteSqlRawAsync(
                "SELECT UpdateFilePath({0})", filePath);
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка при обновлении пути файла: {ex.Message}";
            Console.WriteLine(errorMessage);
            StateHasChanged();
        }
    }



    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;

        string uploadsFolder = Path.Combine(Directory.GetCurrentDirectory(), "UploadedFiles");
        if (!Directory.Exists(uploadsFolder))
        {
            Directory.CreateDirectory(uploadsFolder);
        }

        string savedFilePath = Path.Combine(uploadsFolder, uploadedFile.Name);
        try
        {
            using (var fileStream = new FileStream(savedFilePath, FileMode.Create))
            {
                // Считываем содержимое файла и копируем в файл
                await uploadedFile.OpenReadStream(maxAllowedSize: 10485760).CopyToAsync(fileStream); // 10 MB
            }

            selectedFilePath = savedFilePath;

            // Сохранение пути  БД
            await UpdateFilePathAsync(selectedFilePath);

            Console.WriteLine($"Файл успешно сохранен по пути: {savedFilePath}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка при сохранении файла: {ex.Message}";
            Console.WriteLine(errorMessage);
            StateHasChanged();
        }
    }


    private void SortData(string column)
    {
        if (currentSortColumn == column)
        {
            isAscending = !isAscending;
        }
        else
        {
            currentSortColumn = column;
            isAscending = true;
        }

        filtredModelErrors = column switch
        {
            nameof(ModelErrors.ID) => isAscending ? filtredModelErrors.OrderBy(t => t.ID).ToList() : filtredModelErrors.OrderByDescending(t => t.ID).ToList(),
            nameof(ModelErrors.IndexTm) => isAscending ? filtredModelErrors.OrderBy(t => t.IndexTm).ToList() : filtredModelErrors.OrderByDescending(t => t.IndexTm).ToList(),
            nameof(ModelErrors.ErrorType) => isAscending ? filtredModelErrors.OrderBy(t => t.ErrorType).ToList() : filtredModelErrors.OrderByDescending(t => t.ErrorType).ToList(),
            nameof(ModelErrors.error_status) => isAscending ? filtredModelErrors.OrderBy(e => e.error_status).ToList() : filtredModelErrors.OrderByDescending(e => e.error_status).ToList(),
            _ => filtredModelErrors
        };
    }

    private void SearchData()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            filtredModelErrors = modelErrors;
        }
        else
        {
            filtredModelErrors = modelErrors.Where(t => t.IndexTm.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        SortData(currentSortColumn);
    }

    private void ToggleSearch()
    {
        showSearch = !showSearch;
        if (!showSearch)
        {
            searchTerm = string.Empty;
            SearchData();
        }
    }

    private void ResetSearch()
    {
        searchTerm = string.Empty;
        filtredModelErrors = modelErrors;
        SortData(currentSortColumn);
    }

    private async Task UpdateErrorStatus(Guid id, string newStatus)
    {
        // Найти запись в коллекции
        var modelError = filtredModelErrors.FirstOrDefault(e => e.ID == id);
        if (modelError != null)
        {
            modelError.error_status = newStatus;

            // Обновить запись в базе данных
            var dbError = _modelContext.modelErrors.FirstOrDefault(e => e.ID == id);
            if (dbError != null)
            {
                dbError.error_status = newStatus;
                await _modelContext.SaveChangesAsync();
            }
        }
    }

}

<h2>Выявление ошибок в модели</h2>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger" style="margin-top: 10px;">@errorMessage</p>
}

<div class="mb-3">
    <InputFile OnChange="OnInputFileChange" MaxAllowedSize="10485760" /> <!-- 10 MB -->
</div>

<div class="mb-3">
    <button @onclick="IdentifyErrors" class="btn btn-primary mt-2">Выявить ошибки</button>
</div>

<style>
    .error-row {
        background-color: lightcoral;
    }

    .valid-row {
        background-color: lightgreen;
    }
</style>


@if (isProcessing)
{
    <div class="progress mt-3">
        <div class="progress-bar progress-bar-striped progress-bar-animated bg-primary"
             role="progressbar"
             style="width: @progress%"
             aria-valuenow="@progress"
             aria-valuemin="0"
             aria-valuemax="100">
            @progress%
        </div>
    </div>
    <p class="mt-2">@statusMessage</p>
}

@if (showSearch)
{
    <div class="mb-3">
        <input @bind="searchTerm" placeholder="Поиск по номеру ТМ" class="form-control" />
        <button @onclick="SearchData" class="btn btn-primary mt-2">Искать</button>
        <button @onclick="ResetSearch" class="btn btn-secondary mt-2 ml-2">Сбросить</button>
    </div>
}
@if (modelErrors != null && modelErrors.Any())
{

    @if (!string.IsNullOrEmpty(lastFilePath))
    {
        <p><strong>Выявленные ошибки для файла:</strong> @lastFilePath</p>
    }

    <table class="table table-bordered mt-3">
        <thead>
            <tr>
                <th @onclick="() => SortData(nameof(ModelErrors.ID))">
                    Идентификатор @(currentSortColumn == nameof(ModelErrors.ID) ? (isAscending ? "▲" : "▼") : "")
                </th>
                <th>
                    <span @onclick="() => SortData(nameof(ModelErrors.IndexTm))" style="cursor:pointer;">
                        Индекс ТМ @(currentSortColumn == nameof(ModelErrors.IndexTm) ? (isAscending ? "▲" : "▼") : "")
                    </span>
                    <button @onclick="ToggleSearch" class="btn btn-link" style="padding:0; margin-left:5px;">
                        🔍
                    </button>
                </th>
                <th @onclick="() => SortData(nameof(ModelErrors.ErrorType))">
                    Тип ошибки @(currentSortColumn == nameof(ModelErrors.ErrorType) ? (isAscending ? "▲" : "▼") : "")
                </th>
                <th @onclick="() => SortData(nameof(ModelErrors.error_status))">
                    Статус ошибки @(currentSortColumn == nameof(ModelErrors.error_status) ? (isAscending ? "▲" : "▼") : "")
                </th>

            </tr>
        </thead>
        <tbody>
            @foreach (var modelError in filtredModelErrors)
            {
                <tr class="@(modelError.error_status == "Ошибка" ? "error-row" : modelError.error_status == "Допустимость" ? "valid-row" : "")">
                    <td>@modelError.ID</td>
                    <td>@modelError.IndexTm</td>
                    <td>@modelError.ErrorType</td>

                    <td>
                        <select class="form-select"
                                @onchange="@(e => UpdateErrorStatus(modelError.ID, e.Value?.ToString()))">
                            <option value="Ошибка" selected="@((modelError.error_status == "Ошибка") ? true : false)">Ошибка</option>
                            <option value="Допустимость" selected="@((modelError.error_status == "Допустимость") ? true : false)">Допустимость</option>
                        </select>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p class="mt-3">Нет данных для отображения.</p>
}

<style>
    .text-danger {
        color: red; /* Убедитесь, что текст не прозрачный или не имеет display: none */
    }

    .status-bar {
        margin-top: 20px;
        text-align: center;
    }

    .progress-container {
        width: 100%;
        background-color: #f3f3f3;
        border: 1px solid #ccc;
        border-radius: 5px;
        overflow: hidden;
        margin: 10px 0;
    }

    .progress-bar {
        height: 20px;
        background-color: #4caf50;
        transition: width 0.2s;
    }
</style>